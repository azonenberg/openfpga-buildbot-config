# -*- python -*- # ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# Don't store secrets bare in the configuration file.
import json
secrets = json.load(open('secrets.json'))

import re
c['validation'] = {
    'branch' : re.compile(r'^[\w.+/~-]*$'),
    'revision' : re.compile(r'^[ \w\.\-\/]*$'),
    'property_name' : re.compile(r'^[\w\.\-\/\~:]*$'),
    'property_value' : re.compile(r'^[\w\.\-\/\~=+:]*$'),
}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

c['slaves'] = [
    BuildSlave('debian-jessie-amd64', secrets['slave_password']),
]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.properties import WithProperties
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import Configure, SetPropertyFromCommand, ShellCommand
from buildbot.config import BuilderConfig

c['builders'] = []

c['mergeRequests'] = True

openfpgaBuildFactory = BuildFactory()

openfpgaBuildFactory.addStep(Git(
    name              = 'git_yosys',
    repourl           = 'https://github.com/azonenberg/yosys',
    workdir           = 'yosys',
    submodules        = True,
    mode              = 'incremental',
    alwaysUseLatest   = True,
    progress          = True,
    haltOnFailure     = True,
    description       = 'updating',
    descriptionDone   = 'update',
    descriptionSuffix = 'yosys'))

openfpgaBuildFactory.addStep(ShellCommand(
    name              = 'make_yosys',
    command           = ['make', '-C', WithProperties('%(workdir)s/yosys')],
    haltOnFailure     = True,
    description       = 'building',
    descriptionDone   = 'build',
    descriptionSuffix = 'yosys'))

openfpgaBuildFactory.addStep(Git(
    name              = 'git_openfpga',
    repourl           = 'https://github.com/azonenberg/openfpga',
    workdir           = 'openfpga',
    submodules        = True,
    mode              = 'incremental',
    progress          = True,
    haltOnFailure     = True,
    description       = 'updating',
    descriptionDone   = 'update',
    descriptionSuffix = 'openfpga'))

openfpgaBuildFactory.addStep(ShellCommand(
    name              = 'cppcheck_openfpga',
    command           = ['cppcheck', '-q', '--enable=warning', '--error-exitcode=1',
                         WithProperties('%(workdir)s/openfpga/src')],
    haltOnFailure     = True,
    description       = 'cppchecking',
    descriptionDone   = 'cppcheck',
    descriptionSuffix = 'openfpga'))

def addOpenfpgaBuildStep(suffix, cmake_args=[], build_prefix=[]):
    workdir = WithProperties('%(workdir)s/openfpga/build_' + suffix)

    openfpgaBuildFactory.addStep(ShellCommand(
        name              = 'mkdir_openfpga_' + suffix,
        command           = ['mkdir', '-p', workdir],
        haltOnFailure     = True,
        description       = 'mkdir',
        descriptionSuffix = ['openfpga', 'build_' + suffix],
        hideStepIf        = True))

    openfpgaBuildFactory.addStep(ShellCommand(
        name              = 'cmake_openfpga_' + suffix,
        command           = build_prefix + ['cmake', '..',
                             WithProperties('-DYOSYS_COMMAND=%(workdir)s/yosys/yosys')] +
                            cmake_args,
        workdir           = workdir,
        haltOnFailure     = True,
        description       = 'cmakeing',
        descriptionDone   = 'cmake',
        descriptionSuffix = ['openfpga', suffix]))

    openfpgaBuildFactory.addStep(ShellCommand(
        name              = 'make_openfpga_' + suffix,
        command           = build_prefix + ['make', '-C', workdir],
        haltOnFailure     = True,
        description       = 'building',
        descriptionDone   = 'build',
        descriptionSuffix = ['openfpga', suffix]))

    if suffix == 'analyzer':
        return

    openfpgaBuildFactory.addStep(ShellCommand(
        name              = 'test_openfpga_' + suffix,
        command           = ['ctest', '--output-on-failure'],
        workdir           = workdir,
        haltOnFailure     = True,
        description       = 'testing',
        descriptionDone   = 'test',
        descriptionSuffix = ['openfpga', suffix]))

addOpenfpgaBuildStep('normal')
addOpenfpgaBuildStep('ubsan',
    cmake_args=['-DBUILD_DOC=FALSE', '-DCMAKE_CXX_COMPILER=/usr/bin/clang++-3.8',
                '-DSANITIZE=undefined'])
addOpenfpgaBuildStep('asan',
    cmake_args=['-DBUILD_DOC=FALSE', '-DCMAKE_CXX_COMPILER=/usr/bin/clang++-3.8',
                '-DSANITIZE=address'])
addOpenfpgaBuildStep('analyzer',
    cmake_args=['-DBUILD_DOC=FALSE'],
    build_prefix=['scan-build-3.8', '--status-bugs', '--keep-empty'])

c['builders'].append(
    BuilderConfig(
        name       = 'openfpga',
        slavenames = ['debian-jessie-amd64'],
        factory    = openfpgaBuildFactory))

####### SCHEDULERS

from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.triggerable import Triggerable
from buildbot.changes.filter import ChangeFilter

c['schedulers'] = []

c['schedulers'].append(
    ForceScheduler(
        name            = 'force',
        builderNames    = map(lambda builder: builder.name, c['builders'])))

for builder in c['builders']:
    c['schedulers'].append(
        Triggerable(
            name         = 'trigger-{}'.format(builder.name),
            builderNames = [builder.name]))

for project in ['openfpga']:
    c['schedulers'].append(
        SingleBranchScheduler(
            name            = project,
            change_filter   = ChangeFilter(project=project, branch='master'),
            treeStableTimer = 5,
            builderNames    = [project]))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html, mail, words
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import BasicAuth
from buildbot.status.github import GitHubStatus

authz = Authz(
    auth                   = BasicAuth([(str(secrets['web']['username']),
                                         str(secrets['web']['password']))]),
    forceBuild             = 'auth',
    forceAllBuilds         = 'auth',
    stopBuild              = 'auth',
    stopAllBuilds          = 'auth',
    cancelPendingBuild     = 'auth',
    stopChange             = 'auth')

c['status'].append(
    html.WebStatus(
        http_port            = 'unix:/tmp/buildbot.sock',
        change_hook_dialects = {
            'github': {
                # configure GitHub to post changes to /change_hook/github?project=...
                'secret': secrets['web']['github'],
                'strict': True,
            }
        },
        authz                = authz))

c['status'].append(
    words.IRC(
        'irc.freenode.net', 'openfpga-bb',
        channels        = ['##openfpga'],
        notify_events   = {
            'success'            : True,
            'warnings'           : True,
            'exception'          : True,
            'failure'            : True,
            'failureToSuccess'   : True,
            'exceptionToSuccess' : True,
            'warningsToSuccess'  : True,
        },
        noticeOnChannel = True,
        allowForce      = True))

c['status'].append(
    GitHubStatus(
        # requires a token with repo:status scope
        token=secrets['github']['status_api_token'],
        repoOwner='azonenberg',
        repoName=WithProperties('%(github_repo_name:~)s')))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = 'OpenFPGA'
c['titleURL'] = 'https://github.com/azonenberg/openfpga'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'https://openfpga-dashboard.antikernel.net/'

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : 'sqlite:///state.sqlite3',
}
